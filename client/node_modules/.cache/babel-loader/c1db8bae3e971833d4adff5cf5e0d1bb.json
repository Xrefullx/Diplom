{"ast":null,"code":"import { shallowEqual } from '@react-dnd/shallowequal';\nimport { isRef } from './isRef.js';\nimport { wrapConnectorHooks } from './wrapConnectorHooks.js';\nexport class TargetConnector {\n  get connectTarget() {\n    return this.dropTarget;\n  }\n  reconnect() {\n    // if nothing has changed then don't resubscribe\n    const didChange = this.didHandlerIdChange() || this.didDropTargetChange() || this.didOptionsChange();\n    if (didChange) {\n      this.disconnectDropTarget();\n    }\n    const dropTarget = this.dropTarget;\n    if (!this.handlerId) {\n      return;\n    }\n    if (!dropTarget) {\n      this.lastConnectedDropTarget = dropTarget;\n      return;\n    }\n    if (didChange) {\n      this.lastConnectedHandlerId = this.handlerId;\n      this.lastConnectedDropTarget = dropTarget;\n      this.lastConnectedDropTargetOptions = this.dropTargetOptions;\n      this.unsubscribeDropTarget = this.backend.connectDropTarget(this.handlerId, dropTarget, this.dropTargetOptions);\n    }\n  }\n  receiveHandlerId(newHandlerId) {\n    if (newHandlerId === this.handlerId) {\n      return;\n    }\n    this.handlerId = newHandlerId;\n    this.reconnect();\n  }\n  get dropTargetOptions() {\n    return this.dropTargetOptionsInternal;\n  }\n  set dropTargetOptions(options) {\n    this.dropTargetOptionsInternal = options;\n  }\n  didHandlerIdChange() {\n    return this.lastConnectedHandlerId !== this.handlerId;\n  }\n  didDropTargetChange() {\n    return this.lastConnectedDropTarget !== this.dropTarget;\n  }\n  didOptionsChange() {\n    return !shallowEqual(this.lastConnectedDropTargetOptions, this.dropTargetOptions);\n  }\n  disconnectDropTarget() {\n    if (this.unsubscribeDropTarget) {\n      this.unsubscribeDropTarget();\n      this.unsubscribeDropTarget = undefined;\n    }\n  }\n  get dropTarget() {\n    return this.dropTargetNode || this.dropTargetRef && this.dropTargetRef.current;\n  }\n  clearDropTarget() {\n    this.dropTargetRef = null;\n    this.dropTargetNode = null;\n  }\n  constructor(backend) {\n    this.hooks = wrapConnectorHooks({\n      dropTarget: (node, options) => {\n        this.clearDropTarget();\n        this.dropTargetOptions = options;\n        if (isRef(node)) {\n          this.dropTargetRef = node;\n        } else {\n          this.dropTargetNode = node;\n        }\n        this.reconnect();\n      }\n    });\n    this.handlerId = null;\n    // The drop target may either be attached via ref or connect function\n    this.dropTargetRef = null;\n    this.dropTargetOptionsInternal = null;\n    this.lastConnectedHandlerId = null;\n    this.lastConnectedDropTarget = null;\n    this.lastConnectedDropTargetOptions = null;\n    this.backend = backend;\n  }\n}","map":{"version":3,"sources":["../../src/internals/TargetConnector.ts"],"names":["shallowEqual","isRef","wrapConnectorHooks","TargetConnector","hooks","dropTarget","node","options","clearDropTarget","dropTargetOptions","dropTargetRef","dropTargetNode","reconnect","handlerId","dropTargetOptionsInternal","lastConnectedHandlerId","lastConnectedDropTarget","lastConnectedDropTargetOptions","backend","connectTarget","didChange","didHandlerIdChange","didDropTargetChange","didOptionsChange","disconnectDropTarget","unsubscribeDropTarget","connectDropTarget","receiveHandlerId","newHandlerId","undefined","current"],"mappings":"AAAA,SAASA,YAAY,QAAQ,yBAAyB;AAKtD,SAASC,KAAK,QAAQ,YAAY;AAElC,SAASC,kBAAkB,QAAQ,yBAAyB;AAE5D,OAAO,MAAMC,eAAe,CAAA;EA8B3B,IAAWgB,aAAa,CAAA,EAAQ;IAC/B,OAAO,IAAI,CAACd,UAAU;EACtB;EAEMO,SAAS,CAAA,EAAS;IACxB;IACA,MAAMQ,SAAS,GACd,IAAI,CAACC,kBAAkB,CAAA,CAAE,IACzB,IAAI,CAACC,mBAAmB,CAAA,CAAE,IAC1B,IAAI,CAACC,gBAAgB,CAAA,CAAE;IAExB,IAAIH,SAAS,EAAE;MACd,IAAI,CAACI,oBAAoB,CAAA,CAAE;IAC3B;IAED,MAAMnB,UAAU,GAAG,IAAI,CAACA,UAAU;IAClC,IAAI,CAAC,IAAI,CAACQ,SAAS,EAAE;MACpB;IACA;IACD,IAAI,CAACR,UAAU,EAAE;MAChB,IAAI,CAACW,uBAAuB,GAAGX,UAAU;MACzC;IACA;IAED,IAAIe,SAAS,EAAE;MACd,IAAI,CAACL,sBAAsB,GAAG,IAAI,CAACF,SAAS;MAC5C,IAAI,CAACG,uBAAuB,GAAGX,UAAU;MACzC,IAAI,CAACY,8BAA8B,GAAG,IAAI,CAACR,iBAAiB;MAE5D,IAAI,CAACgB,qBAAqB,GAAG,IAAI,CAACP,OAAO,CAACQ,iBAAiB,CAC1D,IAAI,CAACb,SAAS,EACdR,UAAU,EACV,IAAI,CAACI,iBAAiB,CACtB;IACD;EACD;EAEMkB,gBAAgB,CAACC,YAA+B,EAAQ;IAC9D,IAAIA,YAAY,KAAK,IAAI,CAACf,SAAS,EAAE;MACpC;IACA;IAED,IAAI,CAACA,SAAS,GAAGe,YAAY;IAC7B,IAAI,CAAChB,SAAS,CAAA,CAAE;EAChB;EAED,IAAWH,iBAAiB,CAAA,EAAsB;IACjD,OAAO,IAAI,CAACK,yBAAyB;EACrC;EACD,IAAWL,iBAAiB,CAACF,OAA0B,EAAE;IACxD,IAAI,CAACO,yBAAyB,GAAGP,OAAO;EACxC;EAEOc,kBAAkB,CAAA,EAAY;IACrC,OAAO,IAAI,CAACN,sBAAsB,KAAK,IAAI,CAACF,SAAS;EACrD;EAEOS,mBAAmB,CAAA,EAAY;IACtC,OAAO,IAAI,CAACN,uBAAuB,KAAK,IAAI,CAACX,UAAU;EACvD;EAEOkB,gBAAgB,CAAA,EAAY;IACnC,OAAO,CAACvB,YAAY,CACnB,IAAI,CAACiB,8BAA8B,EACnC,IAAI,CAACR,iBAAiB,CACtB;EACD;EAEMe,oBAAoB,CAAA,EAAG;IAC7B,IAAI,IAAI,CAACC,qBAAqB,EAAE;MAC/B,IAAI,CAACA,qBAAqB,CAAA,CAAE;MAC5B,IAAI,CAACA,qBAAqB,GAAGI,SAAS;IACtC;EACD;EAED,IAAYxB,UAAU,CAAA,EAAG;IACxB,OACC,IAAI,CAACM,cAAc,IAAK,IAAI,CAACD,aAAa,IAAI,IAAI,CAACA,aAAa,CAACoB,OAAQ;EAE1E;EAEOtB,eAAe,CAAA,EAAG;IACzB,IAAI,CAACE,aAAa,GAAG,IAAI;IACzB,IAAI,CAACC,cAAc,GAAG,IAAI;EAC1B;EAxFD,WAAA,CAAmBO,OAAgB,EAAE;IAzBrC,IAAA,CAAOd,KAAK,GAAGF,kBAAkB,CAAC;MACjCG,UAAU,EAAE,CAACC,IAAS,EAAEC,OAA0B,KAAK;QACtD,IAAI,CAACC,eAAe,CAAA,CAAE;QACtB,IAAI,CAACC,iBAAiB,GAAGF,OAAO;QAChC,IAAIN,KAAK,CAACK,IAAI,CAAC,EAAE;UAChB,IAAI,CAACI,aAAa,GAAGJ,IAAI;SACzB,MAAM;UACN,IAAI,CAACK,cAAc,GAAGL,IAAI;QAC1B;QACD,IAAI,CAACM,SAAS,CAAA,CAAE;MAChB;KACD,CAAC;IAEF,IAAA,CAAQC,SAAS,GAAsB,IAAI;IAC3C;IACA,IAAA,CAAQH,aAAa,GAA0B,IAAI;IAEnD,IAAA,CAAQI,yBAAyB,GAA6B,IAAI;IAGlE,IAAA,CAAQC,sBAAsB,GAAsB,IAAI;IACxD,IAAA,CAAQC,uBAAuB,GAAQ,IAAI;IAC3C,IAAA,CAAQC,8BAA8B,GAA6B,IAAI;IAItE,IAAI,CAACC,OAAO,GAAGA,OAAO;EACtB;AAuFD","sourcesContent":["import { shallowEqual } from '@react-dnd/shallowequal'\nimport type { Backend, Identifier, Unsubscribe } from 'dnd-core'\nimport type { RefObject } from 'react'\n\nimport type { DropTargetOptions } from '../types/index.js'\nimport { isRef } from './isRef.js'\nimport type { Connector } from './SourceConnector.js'\nimport { wrapConnectorHooks } from './wrapConnectorHooks.js'\n\nexport class TargetConnector implements Connector {\n\tpublic hooks = wrapConnectorHooks({\n\t\tdropTarget: (node: any, options: DropTargetOptions) => {\n\t\t\tthis.clearDropTarget()\n\t\t\tthis.dropTargetOptions = options\n\t\t\tif (isRef(node)) {\n\t\t\t\tthis.dropTargetRef = node\n\t\t\t} else {\n\t\t\t\tthis.dropTargetNode = node\n\t\t\t}\n\t\t\tthis.reconnect()\n\t\t},\n\t})\n\n\tprivate handlerId: Identifier | null = null\n\t// The drop target may either be attached via ref or connect function\n\tprivate dropTargetRef: RefObject<any> | null = null\n\tprivate dropTargetNode: any\n\tprivate dropTargetOptionsInternal: DropTargetOptions | null = null\n\tprivate unsubscribeDropTarget: Unsubscribe | undefined\n\n\tprivate lastConnectedHandlerId: Identifier | null = null\n\tprivate lastConnectedDropTarget: any = null\n\tprivate lastConnectedDropTargetOptions: DropTargetOptions | null = null\n\tprivate readonly backend: Backend\n\n\tpublic constructor(backend: Backend) {\n\t\tthis.backend = backend\n\t}\n\n\tpublic get connectTarget(): any {\n\t\treturn this.dropTarget\n\t}\n\n\tpublic reconnect(): void {\n\t\t// if nothing has changed then don't resubscribe\n\t\tconst didChange =\n\t\t\tthis.didHandlerIdChange() ||\n\t\t\tthis.didDropTargetChange() ||\n\t\t\tthis.didOptionsChange()\n\n\t\tif (didChange) {\n\t\t\tthis.disconnectDropTarget()\n\t\t}\n\n\t\tconst dropTarget = this.dropTarget\n\t\tif (!this.handlerId) {\n\t\t\treturn\n\t\t}\n\t\tif (!dropTarget) {\n\t\t\tthis.lastConnectedDropTarget = dropTarget\n\t\t\treturn\n\t\t}\n\n\t\tif (didChange) {\n\t\t\tthis.lastConnectedHandlerId = this.handlerId\n\t\t\tthis.lastConnectedDropTarget = dropTarget\n\t\t\tthis.lastConnectedDropTargetOptions = this.dropTargetOptions\n\n\t\t\tthis.unsubscribeDropTarget = this.backend.connectDropTarget(\n\t\t\t\tthis.handlerId,\n\t\t\t\tdropTarget,\n\t\t\t\tthis.dropTargetOptions,\n\t\t\t)\n\t\t}\n\t}\n\n\tpublic receiveHandlerId(newHandlerId: Identifier | null): void {\n\t\tif (newHandlerId === this.handlerId) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.handlerId = newHandlerId\n\t\tthis.reconnect()\n\t}\n\n\tpublic get dropTargetOptions(): DropTargetOptions {\n\t\treturn this.dropTargetOptionsInternal\n\t}\n\tpublic set dropTargetOptions(options: DropTargetOptions) {\n\t\tthis.dropTargetOptionsInternal = options\n\t}\n\n\tprivate didHandlerIdChange(): boolean {\n\t\treturn this.lastConnectedHandlerId !== this.handlerId\n\t}\n\n\tprivate didDropTargetChange(): boolean {\n\t\treturn this.lastConnectedDropTarget !== this.dropTarget\n\t}\n\n\tprivate didOptionsChange(): boolean {\n\t\treturn !shallowEqual(\n\t\t\tthis.lastConnectedDropTargetOptions,\n\t\t\tthis.dropTargetOptions,\n\t\t)\n\t}\n\n\tpublic disconnectDropTarget() {\n\t\tif (this.unsubscribeDropTarget) {\n\t\t\tthis.unsubscribeDropTarget()\n\t\t\tthis.unsubscribeDropTarget = undefined\n\t\t}\n\t}\n\n\tprivate get dropTarget() {\n\t\treturn (\n\t\t\tthis.dropTargetNode || (this.dropTargetRef && this.dropTargetRef.current)\n\t\t)\n\t}\n\n\tprivate clearDropTarget() {\n\t\tthis.dropTargetRef = null\n\t\tthis.dropTargetNode = null\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}