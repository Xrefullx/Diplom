{"ast":null,"code":"export class NativeDragSource {\n  initializeExposedProperties() {\n    Object.keys(this.config.exposeProperties).forEach(property => {\n      Object.defineProperty(this.item, property, {\n        configurable: true,\n        enumerable: true,\n        get() {\n          // eslint-disable-next-line no-console\n          console.warn(`Browser doesn't allow reading \"${property}\" until the drop event.`);\n          return null;\n        }\n      });\n    });\n  }\n  loadDataTransfer(dataTransfer) {\n    if (dataTransfer) {\n      const newProperties = {};\n      Object.keys(this.config.exposeProperties).forEach(property => {\n        const propertyFn = this.config.exposeProperties[property];\n        if (propertyFn != null) {\n          newProperties[property] = {\n            value: propertyFn(dataTransfer, this.config.matchesTypes),\n            configurable: true,\n            enumerable: true\n          };\n        }\n      });\n      Object.defineProperties(this.item, newProperties);\n    }\n  }\n  canDrag() {\n    return true;\n  }\n  beginDrag() {\n    return this.item;\n  }\n  isDragging(monitor, handle) {\n    return handle === monitor.getSourceId();\n  }\n  endDrag() {\n    // empty\n  }\n  constructor(config) {\n    this.config = config;\n    this.item = {};\n    this.initializeExposedProperties();\n  }\n}","map":{"version":3,"sources":["../../src/NativeDragSources/NativeDragSource.ts"],"names":["NativeDragSource","config","item","initializeExposedProperties","Object","keys","exposeProperties","forEach","property","defineProperty","configurable","enumerable","get","console","warn","loadDataTransfer","dataTransfer","newProperties","propertyFn","value","matchesTypes","defineProperties","canDrag","beginDrag","isDragging","monitor","handle","getSourceId","endDrag"],"mappings":"AAIA,OAAO,MAAMA,gBAAgB,CAAA;EAUpBG,2BAA2B,CAAA,EAAG;IACrCC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACJ,MAAM,CAACK,gBAAgB,CAAC,CAACC,OAAO,CAAEC,QAAQ,IAAK;MAC/DJ,MAAM,CAACK,cAAc,CAAC,IAAI,CAACP,IAAI,EAAEM,QAAQ,EAAE;QAC1CE,YAAY,EAAE,IAAI;QAClBC,UAAU,EAAE,IAAI;QAChBC,GAAG,CAAA,EAAG;UACL;UACAC,OAAO,CAACC,IAAI,CACV,kCAAiCN,QAAS,yBAAwB,CACnE;UACD,OAAO,IAAI;QACX;OACD,CAAC;KACF,CAAC;EACF;EAEMO,gBAAgB,CAACC,YAA6C,EAAQ;IAC5E,IAAIA,YAAY,EAAE;MACjB,MAAMC,aAAa,GAA0B,CAAA,CAAE;MAC/Cb,MAAM,CAACC,IAAI,CAAC,IAAI,CAACJ,MAAM,CAACK,gBAAgB,CAAC,CAACC,OAAO,CAAEC,QAAQ,IAAK;QAC/D,MAAMU,UAAU,GAAG,IAAI,CAACjB,MAAM,CAACK,gBAAgB,CAACE,QAAQ,CAAC;QACzD,IAAIU,UAAU,IAAI,IAAI,EAAE;UACvBD,aAAa,CAACT,QAAQ,CAAC,GAAG;YACzBW,KAAK,EAAED,UAAU,CAACF,YAAY,EAAE,IAAI,CAACf,MAAM,CAACmB,YAAY,CAAC;YACzDV,YAAY,EAAE,IAAI;YAClBC,UAAU,EAAE;WACZ;QACD;OACD,CAAC;MACFP,MAAM,CAACiB,gBAAgB,CAAC,IAAI,CAACnB,IAAI,EAAEe,aAAa,CAAC;IACjD;EACD;EAEMK,OAAO,CAAA,EAAY;IACzB,OAAO,IAAI;EACX;EAEMC,SAAS,CAAA,EAAQ;IACvB,OAAO,IAAI,CAACrB,IAAI;EAChB;EAEMsB,UAAU,CAACC,OAAwB,EAAEC,MAAc,EAAW;IACpE,OAAOA,MAAM,KAAKD,OAAO,CAACE,WAAW,CAAA,CAAE;EACvC;EAEMC,OAAO,CAAA,EAAS;IACtB;EAAA;EApDD,WAAA,CAAmB3B,MAAwB,EAAE;IAC5C,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,IAAI,GAAG,CAAA,CAAE;IACd,IAAI,CAACC,2BAA2B,CAAA,CAAE;EAClC;AAkDD","sourcesContent":["import type { DragDropMonitor } from 'dnd-core'\n\nimport type { NativeItemConfig } from './nativeTypesConfig.js'\n\nexport class NativeDragSource {\n\tpublic item: any\n\tprivate config: NativeItemConfig\n\n\tpublic constructor(config: NativeItemConfig) {\n\t\tthis.config = config\n\t\tthis.item = {}\n\t\tthis.initializeExposedProperties()\n\t}\n\n\tprivate initializeExposedProperties() {\n\t\tObject.keys(this.config.exposeProperties).forEach((property) => {\n\t\t\tObject.defineProperty(this.item, property, {\n\t\t\t\tconfigurable: true, // This is needed to allow redefining it later\n\t\t\t\tenumerable: true,\n\t\t\t\tget() {\n\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t`Browser doesn't allow reading \"${property}\" until the drop event.`,\n\t\t\t\t\t)\n\t\t\t\t\treturn null\n\t\t\t\t},\n\t\t\t})\n\t\t})\n\t}\n\n\tpublic loadDataTransfer(dataTransfer: DataTransfer | null | undefined): void {\n\t\tif (dataTransfer) {\n\t\t\tconst newProperties: PropertyDescriptorMap = {}\n\t\t\tObject.keys(this.config.exposeProperties).forEach((property) => {\n\t\t\t\tconst propertyFn = this.config.exposeProperties[property]\n\t\t\t\tif (propertyFn != null) {\n\t\t\t\t\tnewProperties[property] = {\n\t\t\t\t\t\tvalue: propertyFn(dataTransfer, this.config.matchesTypes),\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\tObject.defineProperties(this.item, newProperties)\n\t\t}\n\t}\n\n\tpublic canDrag(): boolean {\n\t\treturn true\n\t}\n\n\tpublic beginDrag(): any {\n\t\treturn this.item\n\t}\n\n\tpublic isDragging(monitor: DragDropMonitor, handle: string): boolean {\n\t\treturn handle === monitor.getSourceId()\n\t}\n\n\tpublic endDrag(): void {\n\t\t// empty\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}