{"ast":null,"code":"export class MonotonicInterpolant {\n  interpolate(x) {\n    const {\n      xs,\n      ys,\n      c1s,\n      c2s,\n      c3s\n    } = this;\n    // The rightmost point in the dataset should give an exact result\n    let i = xs.length - 1;\n    if (x === xs[i]) {\n      return ys[i];\n    }\n    // Search for the interval x is in, returning the corresponding y if x is one of the original xs\n    let low = 0;\n    let high = c3s.length - 1;\n    let mid;\n    while (low <= high) {\n      mid = Math.floor(0.5 * (low + high));\n      const xHere = xs[mid];\n      if (xHere < x) {\n        low = mid + 1;\n      } else if (xHere > x) {\n        high = mid - 1;\n      } else {\n        return ys[mid];\n      }\n    }\n    i = Math.max(0, high);\n    // Interpolate\n    const diff = x - xs[i];\n    const diffSq = diff * diff;\n    return ys[i] + c1s[i] * diff + c2s[i] * diffSq + c3s[i] * diff * diffSq;\n  }\n  constructor(xs, ys) {\n    const {\n      length\n    } = xs;\n    // Rearrange xs and ys so that xs is sorted\n    const indexes = [];\n    for (let i = 0; i < length; i++) {\n      indexes.push(i);\n    }\n    indexes.sort((a, b) => xs[a] < xs[b] ? -1 : 1);\n    // Get consecutive differences and slopes\n    const dys = [];\n    const dxs = [];\n    const ms = [];\n    let dx;\n    let dy;\n    for (let i1 = 0; i1 < length - 1; i1++) {\n      dx = xs[i1 + 1] - xs[i1];\n      dy = ys[i1 + 1] - ys[i1];\n      dxs.push(dx);\n      dys.push(dy);\n      ms.push(dy / dx);\n    }\n    // Get degree-1 coefficients\n    const c1s = [ms[0]];\n    for (let i2 = 0; i2 < dxs.length - 1; i2++) {\n      const m2 = ms[i2];\n      const mNext = ms[i2 + 1];\n      if (m2 * mNext <= 0) {\n        c1s.push(0);\n      } else {\n        dx = dxs[i2];\n        const dxNext = dxs[i2 + 1];\n        const common = dx + dxNext;\n        c1s.push(3 * common / ((common + dxNext) / m2 + (common + dx) / mNext));\n      }\n    }\n    c1s.push(ms[ms.length - 1]);\n    // Get degree-2 and degree-3 coefficients\n    const c2s = [];\n    const c3s = [];\n    let m;\n    for (let i3 = 0; i3 < c1s.length - 1; i3++) {\n      m = ms[i3];\n      const c1 = c1s[i3];\n      const invDx = 1 / dxs[i3];\n      const common = c1 + c1s[i3 + 1] - m - m;\n      c2s.push((m - c1 - common) * invDx);\n      c3s.push(common * invDx * invDx);\n    }\n    this.xs = xs;\n    this.ys = ys;\n    this.c1s = c1s;\n    this.c2s = c2s;\n    this.c3s = c3s;\n  }\n}","map":{"version":3,"sources":["../src/MonotonicInterpolant.ts"],"names":["MonotonicInterpolant","xs","ys","length","indexes","i","push","sort","a","b","dys","dxs","ms","dx","dy","c1s","m2","mNext","dxNext","common","c2s","c3s","m","c1","invDx","interpolate","x","low","high","mid","Math","floor","xHere","max","diff","diffSq"],"mappings":"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","sourcesContent":["export class MonotonicInterpolant {\n\tprivate xs: any\n\tprivate ys: any\n\tprivate c1s: any\n\tprivate c2s: any\n\tprivate c3s: any\n\n\tpublic constructor(xs: number[], ys: number[]) {\n\t\tconst { length } = xs\n\n\t\t// Rearrange xs and ys so that xs is sorted\n\t\tconst indexes = []\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tindexes.push(i)\n\t\t}\n\t\tindexes.sort((a, b) => ((xs[a] as number) < (xs[b] as number) ? -1 : 1))\n\n\t\t// Get consecutive differences and slopes\n\t\tconst dys = []\n\t\tconst dxs = []\n\t\tconst ms = []\n\t\tlet dx\n\t\tlet dy\n\t\tfor (let i = 0; i < length - 1; i++) {\n\t\t\tdx = (xs[i + 1] as number) - (xs[i] as number)\n\t\t\tdy = (ys[i + 1] as number) - (ys[i] as number)\n\t\t\tdxs.push(dx)\n\t\t\tdys.push(dy)\n\t\t\tms.push(dy / dx)\n\t\t}\n\n\t\t// Get degree-1 coefficients\n\t\tconst c1s = [ms[0]]\n\t\tfor (let i = 0; i < dxs.length - 1; i++) {\n\t\t\tconst m2 = ms[i] as number\n\t\t\tconst mNext = ms[i + 1] as number\n\t\t\tif (m2 * mNext <= 0) {\n\t\t\t\tc1s.push(0)\n\t\t\t} else {\n\t\t\t\tdx = dxs[i] as number\n\t\t\t\tconst dxNext = dxs[i + 1] as number\n\t\t\t\tconst common = dx + dxNext\n\t\t\t\tc1s.push(\n\t\t\t\t\t(3 * common) / ((common + dxNext) / m2 + (common + dx) / mNext),\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\tc1s.push(ms[ms.length - 1])\n\n\t\t// Get degree-2 and degree-3 coefficients\n\t\tconst c2s = []\n\t\tconst c3s = []\n\t\tlet m\n\t\tfor (let i = 0; i < c1s.length - 1; i++) {\n\t\t\tm = ms[i] as number\n\t\t\tconst c1 = c1s[i] as number\n\t\t\tconst invDx = 1 / (dxs[i] as number)\n\t\t\tconst common = c1 + (c1s[i + 1] as number) - m - m\n\t\t\tc2s.push((m - c1 - common) * invDx)\n\t\t\tc3s.push(common * invDx * invDx)\n\t\t}\n\n\t\tthis.xs = xs\n\t\tthis.ys = ys\n\t\tthis.c1s = c1s\n\t\tthis.c2s = c2s\n\t\tthis.c3s = c3s\n\t}\n\n\tpublic interpolate(x: number): number {\n\t\tconst { xs, ys, c1s, c2s, c3s } = this\n\n\t\t// The rightmost point in the dataset should give an exact result\n\t\tlet i = xs.length - 1\n\t\tif (x === xs[i]) {\n\t\t\treturn ys[i]\n\t\t}\n\n\t\t// Search for the interval x is in, returning the corresponding y if x is one of the original xs\n\t\tlet low = 0\n\t\tlet high = c3s.length - 1\n\t\tlet mid\n\t\twhile (low <= high) {\n\t\t\tmid = Math.floor(0.5 * (low + high))\n\t\t\tconst xHere = xs[mid]\n\t\t\tif (xHere < x) {\n\t\t\t\tlow = mid + 1\n\t\t\t} else if (xHere > x) {\n\t\t\t\thigh = mid - 1\n\t\t\t} else {\n\t\t\t\treturn ys[mid]\n\t\t\t}\n\t\t}\n\t\ti = Math.max(0, high)\n\n\t\t// Interpolate\n\t\tconst diff = x - xs[i]\n\t\tconst diffSq = diff * diff\n\t\treturn ys[i] + c1s[i] * diff + c2s[i] * diffSq + c3s[i] * diff * diffSq\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}