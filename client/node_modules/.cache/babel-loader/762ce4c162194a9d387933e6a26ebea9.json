{"ast":null,"code":"import { invariant } from '@react-dnd/invariant';\nlet isCallingCanDrag = false;\nlet isCallingIsDragging = false;\nexport class DragSourceMonitorImpl {\n  receiveHandlerId(sourceId) {\n    this.sourceId = sourceId;\n  }\n  getHandlerId() {\n    return this.sourceId;\n  }\n  canDrag() {\n    invariant(!isCallingCanDrag, 'You may not call monitor.canDrag() inside your canDrag() implementation. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor');\n    try {\n      isCallingCanDrag = true;\n      return this.internalMonitor.canDragSource(this.sourceId);\n    } finally {\n      isCallingCanDrag = false;\n    }\n  }\n  isDragging() {\n    if (!this.sourceId) {\n      return false;\n    }\n    invariant(!isCallingIsDragging, 'You may not call monitor.isDragging() inside your isDragging() implementation. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor');\n    try {\n      isCallingIsDragging = true;\n      return this.internalMonitor.isDraggingSource(this.sourceId);\n    } finally {\n      isCallingIsDragging = false;\n    }\n  }\n  subscribeToStateChange(listener, options) {\n    return this.internalMonitor.subscribeToStateChange(listener, options);\n  }\n  isDraggingSource(sourceId) {\n    return this.internalMonitor.isDraggingSource(sourceId);\n  }\n  isOverTarget(targetId, options) {\n    return this.internalMonitor.isOverTarget(targetId, options);\n  }\n  getTargetIds() {\n    return this.internalMonitor.getTargetIds();\n  }\n  isSourcePublic() {\n    return this.internalMonitor.isSourcePublic();\n  }\n  getSourceId() {\n    return this.internalMonitor.getSourceId();\n  }\n  subscribeToOffsetChange(listener) {\n    return this.internalMonitor.subscribeToOffsetChange(listener);\n  }\n  canDragSource(sourceId) {\n    return this.internalMonitor.canDragSource(sourceId);\n  }\n  canDropOnTarget(targetId) {\n    return this.internalMonitor.canDropOnTarget(targetId);\n  }\n  getItemType() {\n    return this.internalMonitor.getItemType();\n  }\n  getItem() {\n    return this.internalMonitor.getItem();\n  }\n  getDropResult() {\n    return this.internalMonitor.getDropResult();\n  }\n  didDrop() {\n    return this.internalMonitor.didDrop();\n  }\n  getInitialClientOffset() {\n    return this.internalMonitor.getInitialClientOffset();\n  }\n  getInitialSourceClientOffset() {\n    return this.internalMonitor.getInitialSourceClientOffset();\n  }\n  getSourceClientOffset() {\n    return this.internalMonitor.getSourceClientOffset();\n  }\n  getClientOffset() {\n    return this.internalMonitor.getClientOffset();\n  }\n  getDifferenceFromInitialOffset() {\n    return this.internalMonitor.getDifferenceFromInitialOffset();\n  }\n  constructor(manager) {\n    this.sourceId = null;\n    this.internalMonitor = manager.getMonitor();\n  }\n}","map":{"version":3,"sources":["../../src/internals/DragSourceMonitorImpl.ts"],"names":["invariant","isCallingCanDrag","isCallingIsDragging","DragSourceMonitorImpl","sourceId","manager","internalMonitor","getMonitor","receiveHandlerId","getHandlerId","canDrag","canDragSource","isDragging","isDraggingSource","subscribeToStateChange","listener","options","isOverTarget","targetId","getTargetIds","isSourcePublic","getSourceId","subscribeToOffsetChange","canDropOnTarget","getItemType","getItem","getDropResult","didDrop","getInitialClientOffset","getInitialSourceClientOffset","getSourceClientOffset","getClientOffset","getDifferenceFromInitialOffset"],"mappings":"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","sourcesContent":["import { invariant } from '@react-dnd/invariant'\nimport type {\n\tDragDropManager,\n\tDragDropMonitor,\n\tIdentifier,\n\tListener,\n\tUnsubscribe,\n\tXYCoord,\n} from 'dnd-core'\n\nimport type { DragSourceMonitor } from '../types/index.js'\n\nlet isCallingCanDrag = false\nlet isCallingIsDragging = false\n\nexport class DragSourceMonitorImpl implements DragSourceMonitor {\n\tprivate internalMonitor: DragDropMonitor\n\tprivate sourceId: Identifier | null = null\n\n\tpublic constructor(manager: DragDropManager) {\n\t\tthis.internalMonitor = manager.getMonitor()\n\t}\n\n\tpublic receiveHandlerId(sourceId: Identifier | null): void {\n\t\tthis.sourceId = sourceId\n\t}\n\n\tpublic getHandlerId(): Identifier | null {\n\t\treturn this.sourceId\n\t}\n\n\tpublic canDrag(): boolean {\n\t\tinvariant(\n\t\t\t!isCallingCanDrag,\n\t\t\t'You may not call monitor.canDrag() inside your canDrag() implementation. ' +\n\t\t\t\t'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor',\n\t\t)\n\n\t\ttry {\n\t\t\tisCallingCanDrag = true\n\t\t\treturn this.internalMonitor.canDragSource(this.sourceId as Identifier)\n\t\t} finally {\n\t\t\tisCallingCanDrag = false\n\t\t}\n\t}\n\n\tpublic isDragging(): boolean {\n\t\tif (!this.sourceId) {\n\t\t\treturn false\n\t\t}\n\t\tinvariant(\n\t\t\t!isCallingIsDragging,\n\t\t\t'You may not call monitor.isDragging() inside your isDragging() implementation. ' +\n\t\t\t\t'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor',\n\t\t)\n\n\t\ttry {\n\t\t\tisCallingIsDragging = true\n\t\t\treturn this.internalMonitor.isDraggingSource(this.sourceId)\n\t\t} finally {\n\t\t\tisCallingIsDragging = false\n\t\t}\n\t}\n\n\tpublic subscribeToStateChange(\n\t\tlistener: Listener,\n\t\toptions?: { handlerIds?: Identifier[] },\n\t): Unsubscribe {\n\t\treturn this.internalMonitor.subscribeToStateChange(listener, options)\n\t}\n\n\tpublic isDraggingSource(sourceId: Identifier): boolean {\n\t\treturn this.internalMonitor.isDraggingSource(sourceId)\n\t}\n\n\tpublic isOverTarget(\n\t\ttargetId: Identifier,\n\t\toptions?: { shallow: boolean },\n\t): boolean {\n\t\treturn this.internalMonitor.isOverTarget(targetId, options)\n\t}\n\n\tpublic getTargetIds(): Identifier[] {\n\t\treturn this.internalMonitor.getTargetIds()\n\t}\n\n\tpublic isSourcePublic(): boolean | null {\n\t\treturn this.internalMonitor.isSourcePublic()\n\t}\n\n\tpublic getSourceId(): Identifier | null {\n\t\treturn this.internalMonitor.getSourceId()\n\t}\n\n\tpublic subscribeToOffsetChange(listener: Listener): Unsubscribe {\n\t\treturn this.internalMonitor.subscribeToOffsetChange(listener)\n\t}\n\n\tpublic canDragSource(sourceId: Identifier): boolean {\n\t\treturn this.internalMonitor.canDragSource(sourceId)\n\t}\n\n\tpublic canDropOnTarget(targetId: Identifier): boolean {\n\t\treturn this.internalMonitor.canDropOnTarget(targetId)\n\t}\n\n\tpublic getItemType(): Identifier | null {\n\t\treturn this.internalMonitor.getItemType()\n\t}\n\n\tpublic getItem(): any {\n\t\treturn this.internalMonitor.getItem()\n\t}\n\n\tpublic getDropResult(): any {\n\t\treturn this.internalMonitor.getDropResult()\n\t}\n\n\tpublic didDrop(): boolean {\n\t\treturn this.internalMonitor.didDrop()\n\t}\n\n\tpublic getInitialClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getInitialClientOffset()\n\t}\n\n\tpublic getInitialSourceClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getInitialSourceClientOffset()\n\t}\n\n\tpublic getSourceClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getSourceClientOffset()\n\t}\n\n\tpublic getClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getClientOffset()\n\t}\n\n\tpublic getDifferenceFromInitialOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getDifferenceFromInitialOffset()\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}